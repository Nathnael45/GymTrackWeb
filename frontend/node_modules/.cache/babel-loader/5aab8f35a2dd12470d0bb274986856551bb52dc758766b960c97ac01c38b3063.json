{"ast":null,"code":"var _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nconst useFetch = url => {\n  _s();\n  const [data, setData] = useState(null);\n  const [isPending, setIsPending] = useState(true);\n  const [error, setError] = useState(null);\n  useEffect(() => {\n    const abortCont = new AbortController();\n    fetch(url, {\n      signal: abortCont.signal\n    }).then(res => {\n      if (!res.ok) {\n        throw Error('Could not fetch the data for that resource');\n      }\n      return res.json();\n    }).then(data => {\n      console.log(data);\n      setData(data);\n      setIsPending(false);\n      setError(null);\n    }).catch(err => {\n      if (err.name == 'AbortError') {\n        console.log('fetch aborted');\n      } else {\n        setError(err.message);\n        setIsPending(false);\n      }\n    });\n    return () => abortCont.abort();\n  }, [url]);\n  return {\n    data,\n    isPending,\n    error\n  };\n};\n_s(useFetch, \"cXWu45hQE9y6Of2sqlY9XSRohsk=\");\nexport default useFetch;","map":{"version":3,"names":["React","useState","useEffect","useFetch","url","_s","data","setData","isPending","setIsPending","error","setError","abortCont","AbortController","fetch","signal","then","res","ok","Error","json","console","log","catch","err","name","message","abort"],"sources":["C:/Users/natip/netNinja/GymTrackWeb/gymtracker/src/useFetch.js"],"sourcesContent":["import React, { useState,useEffect } from 'react';\r\n\r\nconst useFetch = (url) => {\r\n\r\n    const[data,setData] = useState(null);\r\n    const[isPending,setIsPending] = useState(true);\r\n    const[error,setError] = useState(null);\r\n\r\n    useEffect(() => {\r\n        const abortCont = new AbortController();\r\n        fetch(url,{signal: abortCont.signal})\r\n            .then(res => {\r\n                if(!res.ok){\r\n                    throw Error('Could not fetch the data for that resource');\r\n                }\r\n                return res.json();\r\n            })\r\n            .then(data =>{\r\n                console.log(data);\r\n                setData(data);\r\n                setIsPending(false);\r\n                setError(null);\r\n            }).catch(err => {\r\n                if(err.name == 'AbortError'){\r\n                    console.log('fetch aborted')\r\n                }else{\r\n                setError(err.message);\r\n                setIsPending(false);\r\n                }\r\n                \r\n            });\r\n        \r\n        return () => abortCont.abort();\r\n    },[url]);\r\n    return {data,isPending,error};\r\n\r\n}\r\n \r\nexport default useFetch;"],"mappings":";AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAACC,SAAS,QAAQ,OAAO;AAEjD,MAAMC,QAAQ,GAAIC,GAAG,IAAK;EAAAC,EAAA;EAEtB,MAAK,CAACC,IAAI,EAACC,OAAO,CAAC,GAAGN,QAAQ,CAAC,IAAI,CAAC;EACpC,MAAK,CAACO,SAAS,EAACC,YAAY,CAAC,GAAGR,QAAQ,CAAC,IAAI,CAAC;EAC9C,MAAK,CAACS,KAAK,EAACC,QAAQ,CAAC,GAAGV,QAAQ,CAAC,IAAI,CAAC;EAEtCC,SAAS,CAAC,MAAM;IACZ,MAAMU,SAAS,GAAG,IAAIC,eAAe,CAAC,CAAC;IACvCC,KAAK,CAACV,GAAG,EAAC;MAACW,MAAM,EAAEH,SAAS,CAACG;IAAM,CAAC,CAAC,CAChCC,IAAI,CAACC,GAAG,IAAI;MACT,IAAG,CAACA,GAAG,CAACC,EAAE,EAAC;QACP,MAAMC,KAAK,CAAC,4CAA4C,CAAC;MAC7D;MACA,OAAOF,GAAG,CAACG,IAAI,CAAC,CAAC;IACrB,CAAC,CAAC,CACDJ,IAAI,CAACV,IAAI,IAAG;MACTe,OAAO,CAACC,GAAG,CAAChB,IAAI,CAAC;MACjBC,OAAO,CAACD,IAAI,CAAC;MACbG,YAAY,CAAC,KAAK,CAAC;MACnBE,QAAQ,CAAC,IAAI,CAAC;IAClB,CAAC,CAAC,CAACY,KAAK,CAACC,GAAG,IAAI;MACZ,IAAGA,GAAG,CAACC,IAAI,IAAI,YAAY,EAAC;QACxBJ,OAAO,CAACC,GAAG,CAAC,eAAe,CAAC;MAChC,CAAC,MAAI;QACLX,QAAQ,CAACa,GAAG,CAACE,OAAO,CAAC;QACrBjB,YAAY,CAAC,KAAK,CAAC;MACnB;IAEJ,CAAC,CAAC;IAEN,OAAO,MAAMG,SAAS,CAACe,KAAK,CAAC,CAAC;EAClC,CAAC,EAAC,CAACvB,GAAG,CAAC,CAAC;EACR,OAAO;IAACE,IAAI;IAACE,SAAS;IAACE;EAAK,CAAC;AAEjC,CAAC;AAAAL,EAAA,CAlCKF,QAAQ;AAoCd,eAAeA,QAAQ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}